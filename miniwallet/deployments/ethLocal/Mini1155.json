{
  "address": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_saleIsActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_metadataFrozen",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_mintPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPerMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_standardTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rareTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_exchangeRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rareProbabilityPercentage",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_baseUri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contractUri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "standardTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numStandardTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rareTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numRareTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "name": "Mini1155Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "name": "Mini1155MintCommunity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "Mini1155Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "indexed": false,
          "internalType": "struct LibPart.Part[]",
          "name": "royalties",
          "type": "tuple[]"
        }
      ],
      "name": "RoyaltiesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseUri",
          "type": "string"
        }
      ],
      "name": "SetBaseUri",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freezeMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getRaribleV2Royalties",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "internalType": "struct LibPart.Part[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPerMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maxPersonalCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadataUris",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numberOfTokens",
          "type": "uint256"
        }
      ],
      "name": "mintAsOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rareProbabilityPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rareTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revenueAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "royalties",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "value",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salt",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseUri",
          "type": "string"
        }
      ],
      "name": "setBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "setContractUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_exchangeRatio",
          "type": "uint256"
        }
      ],
      "name": "setExchangeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxPerMint",
          "type": "uint256"
        }
      ],
      "name": "setMaxPerMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "name": "setMaxPersonalCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintPrice",
          "type": "uint256"
        }
      ],
      "name": "setMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "name": "setNameSymbol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rareProbabilityPercentage",
          "type": "uint256"
        }
      ],
      "name": "setRareProbabilityPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "setRareTokenId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "setRevenueAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_royaltiesReceipientAddress",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_percentageBasisPoints",
          "type": "uint96"
        }
      ],
      "name": "setRoyalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "setSalt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "setStandardTokenId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newuri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "setUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "standardTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleSaleState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "shouldUseRevenueAccount",
          "type": "bool"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0bfa5c52626a3057133110bfcace16829008ed7bdee4ee66d1a905c448fa8e45",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
    "transactionIndex": 0,
    "gasUsed": "3855279",
    "logsBloom": "0x
    "blockHash": "0x95755b6c3f5f25f13db18fcb48a7c50fa2dbd557f2bcc997fc6e74b5c126b5c2",
    "transactionHash": "0x0bfa5c52626a3057133110bfcace16829008ed7bdee4ee66d1a905c448fa8e45",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12,
        "transactionHash": "0x0bfa5c52626a3057133110bfcace16829008ed7bdee4ee66d1a905c448fa8e45",
        "address": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x95755b6c3f5f25f13db18fcb48a7c50fa2dbd557f2bcc997fc6e74b5c126b5c2"
      }
    ],
    "blockNumber": 12,
    "cumulativeGasUsed": "3855279",
    "status": 1,
    "byzantium": true
  },
  "args": [
    false,
    false,
    "42000000000000000",
    "10",
    "1",
    "2",
    "0",
    "1",
    "0x3100000000000000000000000000000000000000000000000000000000000000",
    "ipfs://Qmc8DVEthq7cZMTMyZ2NQ8dHkG99n549DMBwNzAypQgXe1/Mini1155/",
    "ipfs://Qmc8DVEthq7cZMTMyZ2NQ8dHkG99n549DMBwNzAypQgXe1/Mini1155/contract.json"
  ],
  "numDeployments": 1,
  "solcInputHash": "eb67976a27a158fcc5c575ed68d95e39",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_saleIsActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_metadataFrozen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_standardTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rareTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rareProbabilityPercentage\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contractUri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"standardTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numStandardTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rareTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numRareTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"Mini1155Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"Mini1155MintCommunity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"Mini1155Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"}],\"name\":\"RoyaltiesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"name\":\"SetBaseUri\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRaribleV2Royalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxPersonalCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadataUris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"mintAsOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rareProbabilityPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rareTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royalties\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setContractUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchangeRatio\",\"type\":\"uint256\"}],\"name\":\"setExchangeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPerMint\",\"type\":\"uint256\"}],\"name\":\"setMaxPerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setMaxPersonalCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"setNameSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rareProbabilityPercentage\",\"type\":\"uint256\"}],\"name\":\"setRareProbabilityPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setRareTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setRevenueAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_royaltiesReceipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_percentageBasisPoints\",\"type\":\"uint96\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"setSalt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setStandardTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standardTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldUseRevenueAccount\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Developed by: John Whitton (github: johnwhittton), Aaron Li (github: polymorpher)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/miniNFTs/Mini1155.sol\":\"Mini1155\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xb11d1ade7146ac3da122e1f387ea82b0bd385d50823946c3f967dbffef3e9f4f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3deb5f3b0c9d12944f62ab680f041bbf1910d9d3ac6b545b4b8e399643c538d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/miniNFTs/Mini1155.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./rarible/royalties/contracts/impl/RoyaltiesV2Impl.sol\\\";\\nimport \\\"./rarible/royalties/contracts/LibPart.sol\\\";\\nimport \\\"./rarible/royalties/contracts/LibRoyaltiesV2.sol\\\";\\n\\n/// Developed by: John Whitton (github: johnwhittton), Aaron Li (github: polymorpher)\\ncontract Mini1155 is\\n    ERC1155,\\n    Ownable,\\n    Pausable,\\n    ERC1155Burnable,\\n    ERC1155Supply,\\n    RoyaltiesV2Impl\\n{\\n    // Contract logic variables\\n    string public contractURI;\\n    string public baseUri;\\n    bytes32 public salt;\\n    uint256 public mintPrice;\\n    uint256 public maxPerMint;\\n    uint256 public standardTokenId;\\n    uint256 public rareTokenId;\\n    uint256 public exchangeRatio; // # standard needed to get 1 rare\\n    uint256 public rareProbabilityPercentage; // chance to get rare token during minting\\n\\n    // Contract admin variables\\n    address public revenueAccount;\\n    string public name;\\n    string public symbol;\\n    bool public saleIsActive;\\n    bool public saleStarted;\\n    bool public metadataFrozen;\\n\\n    // Token specific public variables\\n    mapping(uint256 => uint256) public maxSupply;\\n    mapping(uint256 => uint256) public maxPersonalCap;\\n    mapping(uint256 => string) public metadataUris;\\n\\n    bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n\\n    event SetBaseUri(string baseUri);\\n    event Mini1155Mint(\\n        uint256 standardTokenId,\\n        uint256 numStandardTokens,\\n        uint256 rareTokenId,\\n        uint256 numRareTokens,\\n        address initialOwner\\n    );\\n    event Mini1155MintCommunity(\\n        uint256 tokenId,\\n        uint256 numTokens,\\n        address initialOwner\\n    );\\n    event Mini1155Transfer(\\n        uint256 id,\\n        address from,\\n        address to,\\n        address operator\\n    );\\n\\n    constructor(\\n        bool _saleIsActive,\\n        bool _metadataFrozen,\\n        uint256 _mintPrice,\\n        uint256 _maxPerMint,\\n        uint256 _standardTokenId,\\n        uint256 _rareTokenId,\\n        uint256 _exchangeRatio,\\n        uint256 _rareProbabilityPercentage,\\n        bytes32 _salt,\\n        string memory _baseUri,\\n        string memory _contractUri\\n    ) ERC1155(_baseUri) {\\n        saleIsActive = _saleIsActive;\\n        if (saleIsActive) {\\n            saleStarted = true;\\n        }\\n        metadataFrozen = _metadataFrozen;\\n        mintPrice = _mintPrice;\\n        maxPerMint = _maxPerMint;\\n        standardTokenId = _standardTokenId;\\n        rareTokenId = _rareTokenId;\\n        exchangeRatio = _exchangeRatio;\\n        rareProbabilityPercentage = _rareProbabilityPercentage;\\n        salt = _salt;\\n        contractURI = _contractUri;\\n        baseUri = _baseUri;\\n        setURI(_contractUri);\\n    }\\n\\n    function setURI(string memory newuri) public onlyOwner {\\n        _setURI(newuri);\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override(ERC1155, ERC1155Supply) whenNotPaused {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    // Begin Mini1155 Enhancements\\n    modifier whenSaleActive() {\\n        require(saleIsActive, \\\"sale not active\\\");\\n        _;\\n    }\\n\\n    modifier whenMetadataNotFrozen() {\\n        require(!metadataFrozen, \\\"metadata frozen\\\");\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == this.name.selector ||\\n            interfaceId == this.symbol.selector ||\\n            interfaceId == LibRoyaltiesV2._INTERFACE_ID_ROYALTIES ||\\n            interfaceId == _INTERFACE_ID_ERC2981 ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function mint(uint256 _amount) external payable whenSaleActive {\\n        require(_amount > 0, \\\"minting too few\\\");\\n        require(_amount <= maxPerMint, \\\"exceeded per mint limit\\\");\\n        require(mintPrice * _amount <= msg.value, \\\"insufficient payment\\\");\\n        uint256 excess = msg.value - (_amount * mintPrice);\\n        if (excess > 0) {\\n            payable(msg.sender).transfer(excess);\\n        }\\n\\n        bool isRare = false;\\n        uint256 standardBalance = ERC1155.balanceOf(\\n            msg.sender,\\n            standardTokenId\\n        );\\n        uint256 rareBalance = ERC1155.balanceOf(msg.sender, rareTokenId);\\n        uint256 rareSupply = ERC1155Supply.totalSupply(rareTokenId);\\n        if (\\n            rareSupply < maxSupply[rareTokenId] &&\\n            rareBalance < maxPersonalCap[rareTokenId]\\n        ) {\\n            uint256 roll = uint256(\\n                keccak256(\\n                    bytes.concat(\\n                        salt,\\n                        bytes20(msg.sender),\\n                        bytes32(standardBalance),\\n                        bytes32(rareBalance)\\n                    )\\n                )\\n            ) % 100;\\n            if (roll < (rareProbabilityPercentage * _amount)) {\\n                isRare = true;\\n            }\\n        }\\n        if (isRare) {\\n            _amount -= 1;\\n            _mint(msg.sender, rareTokenId, 1, \\\"\\\");\\n        }\\n        if (_amount > 0) {\\n            require(\\n                totalSupply(standardTokenId) + _amount <=\\n                    maxSupply[standardTokenId],\\n                \\\"standard token supply cap exceeded\\\"\\n            );\\n            require(\\n                standardBalance + _amount <= maxPersonalCap[standardTokenId],\\n                \\\"standard token personal cap exceeded\\\"\\n            );\\n            _mint(msg.sender, standardTokenId, _amount, \\\"\\\");\\n        }\\n        emit Mini1155Mint(\\n            standardTokenId,\\n            _amount,\\n            rareTokenId,\\n            isRare ? 1 : 0,\\n            msg.sender\\n        );\\n    }\\n\\n    function exchange() public {\\n        require(exchangeRatio > 0, \\\"exchange not enabled\\\");\\n        uint256 standardBalance = ERC1155.balanceOf(\\n            msg.sender,\\n            standardTokenId\\n        );\\n        require(standardBalance >= exchangeRatio, \\\"too few standard tokens\\\");\\n        _burn(msg.sender, standardTokenId, exchangeRatio);\\n        _mint(msg.sender, rareTokenId, 1, \\\"\\\");\\n    }\\n\\n    function uri(uint256 id) public view override returns (string memory) {\\n        if (bytes(metadataUris[id]).length == 0) {\\n            // return string(abi.encodePacked(baseUri, uint2str(id), \\\".json\\\"));\\n            return string(abi.encodePacked(baseUri, uint2str(id)));\\n        }\\n        return metadataUris[id];\\n    }\\n\\n    // ------------------\\n    // Functions for the owner (MiniWallet minting contracts)\\n    // ------------------\\n\\n    // Explicit Overrides\\n    function burn(\\n        address _address,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) public override(ERC1155Burnable) onlyOwner {\\n        ERC1155Burnable.burn(_address, _tokenId, _amount);\\n    }\\n\\n    function burnBatch(\\n        address _address,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _amounts\\n    ) public override(ERC1155Burnable) onlyOwner {\\n        ERC1155Burnable.burnBatch(_address, _tokenIds, _amounts);\\n    }\\n\\n    function freezeMetadata() external onlyOwner whenMetadataNotFrozen {\\n        metadataFrozen = true;\\n    }\\n\\n    function toggleSaleState() external onlyOwner {\\n        // require ((saleIsActive || (offsetValue != 0)), \\\"cannot start sale until airdrop is complete and offset set\\\");\\n        saleIsActive = !saleIsActive;\\n        if (saleIsActive && !saleStarted) {\\n            saleStarted = true;\\n        }\\n    }\\n\\n    function setContractUri(string memory uri_)\\n        public\\n        whenMetadataNotFrozen\\n        onlyOwner\\n    {\\n        contractURI = uri_;\\n    }\\n\\n    function setMaxPerMint(uint256 _maxPerMint) external onlyOwner {\\n        maxPerMint = _maxPerMint;\\n    }\\n\\n    function setMintPrice(uint256 _mintPrice) external onlyOwner {\\n        mintPrice = _mintPrice;\\n    }\\n\\n    function setMaxSupply(uint256 _tokenId, uint256 _cap) external onlyOwner {\\n        maxSupply[_tokenId] = _cap;\\n    }\\n\\n    function setMaxPersonalCap(uint256 _tokenId, uint256 _cap)\\n        external\\n        onlyOwner\\n    {\\n        maxPersonalCap[_tokenId] = _cap;\\n    }\\n\\n    function setStandardTokenId(uint256 _tokenId) external onlyOwner {\\n        standardTokenId = _tokenId;\\n    }\\n\\n    function setRareTokenId(uint256 _tokenId) external onlyOwner {\\n        rareTokenId = _tokenId;\\n    }\\n\\n    function setExchangeRatio(uint256 _exchangeRatio) external onlyOwner {\\n        exchangeRatio = _exchangeRatio;\\n    }\\n\\n    function setRareProbabilityPercentage(uint256 _rareProbabilityPercentage)\\n        external\\n        onlyOwner\\n    {\\n        rareProbabilityPercentage = _rareProbabilityPercentage;\\n    }\\n\\n    function setBaseUri(string memory _baseUri)\\n        external\\n        onlyOwner\\n        whenMetadataNotFrozen\\n    {\\n        baseUri = _baseUri;\\n        emit SetBaseUri(baseUri);\\n    }\\n\\n    function mintAsOwner(\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _numberOfTokens\\n    ) external onlyOwner {\\n        require(_to != address(0), \\\"zero to-address\\\");\\n        if (maxSupply[_tokenId] > 0) {\\n            require(\\n                totalSupply(_tokenId) + _numberOfTokens <= maxSupply[_tokenId],\\n                \\\"supply exceeded\\\"\\n            );\\n        }\\n        _mint(_to, _tokenId, _numberOfTokens, \\\"\\\");\\n        emit Mini1155MintCommunity(_tokenId, _numberOfTokens, _to);\\n    }\\n\\n    function withdraw(uint256 amount, bool shouldUseRevenueAccount) public {\\n        require(\\n            msg.sender == Ownable.owner() || msg.sender == revenueAccount,\\n            \\\"unauthorized\\\"\\n        );\\n        address a = shouldUseRevenueAccount ? revenueAccount : Ownable.owner();\\n        (bool success, ) = a.call{value: amount}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function setUri(uint256 id, string memory uri_)\\n        public\\n        onlyOwner\\n        whenMetadataNotFrozen\\n    {\\n        metadataUris[id] = uri_;\\n    }\\n\\n    function uint2str(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function setRevenueAccount(address account) public onlyOwner {\\n        revenueAccount = account;\\n    }\\n\\n    function setSalt(bytes32 _salt) public onlyOwner {\\n        salt = _salt;\\n    }\\n\\n    function setNameSymbol(string memory name_, string memory symbol_)\\n        public\\n        onlyOwner\\n    {\\n        name = name_;\\n        symbol = symbol_;\\n    }\\n\\n    function setRoyalties(\\n        uint256 _tokenId,\\n        address payable _royaltiesReceipientAddress,\\n        uint96 _percentageBasisPoints\\n    ) public onlyOwner {\\n        LibPart.Part[] memory _royalties = new LibPart.Part[](1);\\n        _royalties[0].value = _percentageBasisPoints;\\n        _royalties[0].account = _royaltiesReceipientAddress;\\n        _saveRoyalties(_tokenId, _royalties);\\n    }\\n\\n    // royalty stuff\\n\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        LibPart.Part[] memory _royalties = royalties[_tokenId];\\n        if (_royalties.length > 0) {\\n            return (\\n                _royalties[0].account,\\n                (_salePrice * _royalties[0].value) / 10000\\n            );\\n        }\\n        return (address(0), 0);\\n    }\\n\\n    // accept deposit\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xec4689e603376f34475cb1feae005dd7610fabb9e0485e8b44f4eabffcd050d6\",\"license\":\"Apache-2.0\"},\"contracts/miniNFTs/rarible/royalties/contracts/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xdd349a780718d549e742a2a6e10fda27fcbb989717ef352c6643b3bce70b9351\",\"license\":\"Apache-2.0\"},\"contracts/miniNFTs/rarible/royalties/contracts/LibRoyaltiesV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nlibrary LibRoyaltiesV2 {\\n    /*\\n    * bytes4(keccak256('getRoyalties(LibAsset.AssetType)')) == 0x44c74bcc\\n    */\\n    bytes4 constant _INTERFACE_ID_ROYALTIES = 0x44c74bcc;\\n}\\n\",\"keccak256\":\"0x43f1503ffecc266a421097ee8767227ffdfc1de4960784244ddfad4c133ec65f\",\"license\":\"Apache-2.0\"},\"contracts/miniNFTs/rarible/royalties/contracts/RoyaltiesV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\ninterface RoyaltiesV2 {\\n    event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalties);\\n\\n    function getRaribleV2Royalties(uint256 id) external view returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0x36d5237310b0ca8221837a9689fd750f409215962cd15f50fa8cc67951aceac9\",\"license\":\"Apache-2.0\"},\"contracts/miniNFTs/rarible/royalties/contracts/impl/AbstractRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../LibPart.sol\\\";\\n\\nabstract contract AbstractRoyalties {\\n    mapping (uint256 => LibPart.Part[]) public royalties;\\n\\n    function _saveRoyalties(uint256 _id, LibPart.Part[] memory _royalties) internal {\\n        for (uint i = 0; i < _royalties.length; i++) {\\n            require(_royalties[i].account != address(0x0), \\\"Recipient should be present\\\");\\n            require(_royalties[i].value != 0, \\\"Royalty value should be positive\\\");\\n            royalties[_id].push(_royalties[i]);\\n        }\\n        _onRoyaltiesSet(_id, _royalties);\\n    }\\n\\n    function _updateAccount(uint256 _id, address _from, address _to) internal {\\n        uint length = royalties[_id].length;\\n        for(uint i = 0; i < length; i++) {\\n            if (royalties[_id][i].account == _from) {\\n                royalties[_id][i].account = payable(address(uint160(_to)));\\n            }\\n        }\\n    }\\n\\n    function _onRoyaltiesSet(uint256 _id, LibPart.Part[] memory _royalties) virtual internal;\\n}\\n\",\"keccak256\":\"0x05f63abd974fb21bf0ee76df0bc98c8ecebf81904b45f1c2e3ffd48d9dda02c3\",\"license\":\"Apache-2.0\"},\"contracts/miniNFTs/rarible/royalties/contracts/impl/RoyaltiesV2Impl.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AbstractRoyalties.sol\\\";\\nimport \\\"../RoyaltiesV2.sol\\\";\\n\\ncontract RoyaltiesV2Impl is AbstractRoyalties, RoyaltiesV2 {\\n    function getRaribleV2Royalties(uint256 id) override external view returns (LibPart.Part[] memory) {\\n        return royalties[id];\\n    }\\n\\n    function _onRoyaltiesSet(uint256 _id, LibPart.Part[] memory _royalties) override internal {\\n        emit RoyaltiesSet(_id, _royalties);\\n    }\\n}\\n\",\"keccak256\":\"0x97364b4c2cc76991a8da231ecb08c9ff0fecd834350c40df53d5d62e4e3d2d46\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200419538038062004195833981016040819052620000349162000370565b81620000408162000103565b506200004c336200011c565b6003805460ff60a01b191690556012805460ff19168c151590811790915560ff161562000083576012805461ff0019166101001790555b6012805462ff00001916620100008c1515021790556009899055600a889055600b879055600c869055600d859055600e84905560088390558051620000d0906006906020840190620001e7565b508151620000e6906007906020850190620001e7565b50620000f2816200016e565b505050505050505050505062000488565b805162000118906002906020840190620001e7565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6200017862000186565b620001838162000103565b50565b6003546001600160a01b03163314620001e55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b828054620001f5906200044b565b90600052602060002090601f01602090048101928262000219576000855562000264565b82601f106200023457805160ff191683800117855562000264565b8280016001018555821562000264579182015b828111156200026457825182559160200191906001019062000247565b506200027292915062000276565b5090565b5b8082111562000272576000815560010162000277565b805180151581146200029e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002cb57600080fd5b81516001600160401b0380821115620002e857620002e8620002a3565b604051601f8301601f19908116603f01168101908282118183101715620003135762000313620002a3565b816040528381526020925086838588010111156200033057600080fd5b600091505b8382101562000354578582018301518183018401529082019062000335565b83821115620003665760008385830101525b9695505050505050565b60008060008060008060008060008060006101608c8e0312156200039357600080fd5b6200039e8c6200028d565b9a50620003ae60208d016200028d565b995060408c0151985060608c0151975060808c0151965060a08c0151955060c08c0151945060e08c015193506101008c015192506101208c015160018060401b03811115620003fc57600080fd5b6200040a8e828f01620002b9565b6101408e015190935090506001600160401b038111156200042a57600080fd5b620004388e828f01620002b9565b9150509295989b509295989b9093969950565b600181811c908216806200046057607f821691505b602082108114156200048257634e487b7160e01b600052602260045260246000fd5b50919050565b613cfd80620004986000396000f3fe6080604052600436106103a55760003560e01c8063857aa89a116101e7578063cb5dcaec1161010d578063eb8d2444116100a0578063f4a0a5281161006f578063f4a0a52814610b0b578063f5298aca14610b2b578063f5dc7d5614610b4b578063fb3cc6c214610b6b57600080fd5b8063eb8d244414610a91578063edb2625514610aab578063f242432a14610acb578063f2fde38b14610aeb57600080fd5b8063daaeec86116100dc578063daaeec86146109fe578063db6242c314610a13578063e8a3d48514610a33578063e985e9c514610a4857600080fd5b8063cb5dcaec1461099e578063ccb4807b146109b4578063d111515d146109d4578063d2f7265a146109e957600080fd5b8063a0712d6811610185578063b4d7dbed11610154578063b4d7dbed14610918578063bd85b0391461092e578063bfa0b1331461095b578063cad96cca1461097157600080fd5b8063a0712d68146108a5578063a0bcfc7f146108b8578063a22cb465146108d8578063a65b9926146108f857600080fd5b80638924af74116101c15780638924af74146108025780638da5cb5b1461084957806395d89b411461087b5780639abc83201461089057600080fd5b8063857aa89a1461079f578063857c2985146107bf578063869f7594146107d557600080fd5b80634006ccc5116102cc5780635c975abb1161026a578063715018a611610239578063715018a614610735578063782f08ae1461074a5780637c7810801461076a5780638456cb591461078a57600080fd5b80635c975abb146106c0578063611ef44f146106df5780636817c76c146106ff5780636b20c4541461071557600080fd5b80634f558e79116102a65780634f558e791461063c578063504334c21461066b578063507e094f1461068b5780635c474f9e146106a157600080fd5b80634006ccc5146105d95780634798b851146105ef5780634e1273f41461060f57600080fd5b80632591003311610344578063311aaef511610313578063311aaef51461055757806337da577c1461058457806338d07436146105a45780633f4ba83a146105c457600080fd5b806325910033146104b85780632a55205a146104d85780632eb2c2d61461051757806330027f3b1461053757600080fd5b8063064c6b3811610380578063064c6b381461043657806306fdde03146104565780630e89341c14610478578063143094db1461049857600080fd5b8062fdd58e146103b157806301ffc9a7146103e457806302fe53051461041457600080fd5b366103ac57005b600080fd5b3480156103bd57600080fd5b506103d16103cc366004612f52565b610b8b565b6040519081526020015b60405180910390f35b3480156103f057600080fd5b506104046103ff366004612f94565b610c21565b60405190151581526020016103db565b34801561042057600080fd5b5061043461042f36600461306d565b610c9d565b005b34801561044257600080fd5b506104346104513660046130a9565b610cb1565b34801561046257600080fd5b5061046b610ccb565b6040516103db9190613123565b34801561048457600080fd5b5061046b610493366004613136565b610d59565b3480156104a457600080fd5b506104346104b336600461314f565b610e4e565b3480156104c457600080fd5b506104346104d3366004613136565b610f0a565b3480156104e457600080fd5b506104f86104f33660046130a9565b610f17565b604080516001600160a01b0390931683526020830191909152016103db565b34801561052357600080fd5b50610434610532366004613231565b61101d565b34801561054357600080fd5b506104346105523660046132de565b611069565b34801561056357600080fd5b506103d1610572366004613136565b60146020526000908152604090205481565b34801561059057600080fd5b5061043461059f3660046130a9565b611093565b3480156105b057600080fd5b506104346105bf366004613310565b6110ad565b3480156105d057600080fd5b50610434611192565b3480156105e557600080fd5b506103d1600d5481565b3480156105fb57600080fd5b5061043461060a366004613136565b6111a4565b34801561061b57600080fd5b5061062f61062a36600461333c565b6111b1565b6040516103db9190613443565b34801561064857600080fd5b50610404610657366004613136565b600090815260046020526040902054151590565b34801561067757600080fd5b50610434610686366004613456565b6112da565b34801561069757600080fd5b506103d1600a5481565b3480156106ad57600080fd5b5060125461040490610100900460ff1681565b3480156106cc57600080fd5b50600354600160a01b900460ff16610404565b3480156106eb57600080fd5b506104346106fa366004613136565b61130e565b34801561070b57600080fd5b506103d160095481565b34801561072157600080fd5b506104346107303660046134af565b61131b565b34801561074157600080fd5b5061043461132e565b34801561075657600080fd5b50610434610765366004613524565b611340565b34801561077657600080fd5b50610434610785366004613136565b611390565b34801561079657600080fd5b5061043461139d565b3480156107ab57600080fd5b506104346107ba366004613136565b6113ad565b3480156107cb57600080fd5b506103d1600b5481565b3480156107e157600080fd5b506103d16107f0366004613136565b60136020526000908152604090205481565b34801561080e57600080fd5b5061082261081d3660046130a9565b6113ba565b604080516001600160a01b0390931683526001600160601b039091166020830152016103db565b34801561085557600080fd5b506003546001600160a01b03165b6040516001600160a01b0390911681526020016103db565b34801561088757600080fd5b5061046b611403565b34801561089c57600080fd5b5061046b611410565b6104346108b3366004613136565b61141d565b3480156108c457600080fd5b506104346108d336600461306d565b611842565b3480156108e457600080fd5b506104346108f3366004613560565b6118c2565b34801561090457600080fd5b5061046b610913366004613136565b6118d1565b34801561092457600080fd5b506103d1600c5481565b34801561093a57600080fd5b506103d1610949366004613136565b60009081526004602052604090205490565b34801561096757600080fd5b506103d160085481565b34801561097d57600080fd5b5061099161098c366004613136565b6118ea565b6040516103db91906135d9565b3480156109aa57600080fd5b506103d1600e5481565b3480156109c057600080fd5b506104346109cf36600461306d565b611979565b3480156109e057600080fd5b506104346119bd565b3480156109f557600080fd5b50610434611a01565b348015610a0a57600080fd5b50610434611ad9565b348015610a1f57600080fd5b50610434610a2e366004613136565b611b21565b348015610a3f57600080fd5b5061046b611b2e565b348015610a5457600080fd5b50610404610a633660046135ec565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b348015610a9d57600080fd5b506012546104049060ff1681565b348015610ab757600080fd5b50610434610ac6366004613625565b611b3b565b348015610ad757600080fd5b50610434610ae636600461365a565b611c6d565b348015610af757600080fd5b50610434610b063660046132de565b611cb2565b348015610b1757600080fd5b50610434610b26366004613136565b611d28565b348015610b3757600080fd5b50610434610b46366004613625565b611d35565b348015610b5757600080fd5b50600f54610863906001600160a01b031681565b348015610b7757600080fd5b506012546104049062010000900460ff1681565b60006001600160a01b038316610bfb5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b031982166306fdde0360e01b1480610c5257506001600160e01b031982166395d89b4160e01b145b80610c6d57506001600160e01b03198216631131d2f360e21b145b80610c8857506001600160e01b0319821663152a902d60e11b145b80610c975750610c9782611d48565b92915050565b610ca5611d98565b610cae81611df2565b50565b610cb9611d98565b60009182526014602052604090912055565b60108054610cd8906136c2565b80601f0160208091040260200160405190810160405280929190818152602001828054610d04906136c2565b8015610d515780601f10610d2657610100808354040283529160200191610d51565b820191906000526020600020905b815481529060010190602001808311610d3457829003601f168201915b505050505081565b6000818152601560205260409020805460609190610d76906136c2565b15159050610db0576007610d8983611e05565b604051602001610d9a9291906136fd565b6040516020818303038152906040529050919050565b60008281526015602052604090208054610dc9906136c2565b80601f0160208091040260200160405190810160405280929190818152602001828054610df5906136c2565b8015610e425780601f10610e1757610100808354040283529160200191610e42565b820191906000526020600020905b815481529060010190602001808311610e2557829003601f168201915b50505050509050919050565b610e56611d98565b604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610e6d5790505090508181600081518110610eaa57610eaa613780565b6020026020010151602001906001600160601b031690816001600160601b0316815250508281600081518110610ee257610ee2613780565b60209081029190910101516001600160a01b039091169052610f048482611f2d565b50505050565b610f12611d98565b600c55565b6000828152600560209081526040808320805482518185028101850190935280835284938493929190849084015b82821015610f9457600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046001600160601b031681830152825260019092019101610f45565b50505050905060008151111561100d5780600081518110610fb757610fb7613780565b60200260200101516000015161271082600081518110610fd957610fd9613780565b6020026020010151602001516001600160601b031686610ff991906137ac565b61100391906137e1565b9250925050611016565b60008092509250505b9250929050565b6001600160a01b03851633148061103957506110398533610a63565b6110555760405162461bcd60e51b8152600401610bf2906137f5565b61106285858585856120b1565b5050505050565b611071611d98565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b61109b611d98565b60009182526013602052604090912055565b6003546001600160a01b03163314806110d05750600f546001600160a01b031633145b61110b5760405162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b6044820152606401610bf2565b600081611123576003546001600160a01b0316611130565b600f546001600160a01b03165b90506000816001600160a01b03168460405160006040518083038185875af1925050503d806000811461117f576040519150601f19603f3d011682016040523d82523d6000602084013e611184565b606091505b5050905080610f0457600080fd5b61119a611d98565b6111a261225b565b565b6111ac611d98565b600b55565b606081518351146112165760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610bf2565b600083516001600160401b0381111561123157611231612fb8565b60405190808252806020026020018201604052801561125a578160200160208202803683370190505b50905060005b84518110156112d2576112a585828151811061127e5761127e613780565b602002602001015185838151811061129857611298613780565b6020026020010151610b8b565b8282815181106112b7576112b7613780565b60209081029190910101526112cb81613844565b9050611260565b509392505050565b6112e2611d98565b81516112f5906010906020850190612ea4565b508051611309906011906020840190612ea4565b505050565b611316611d98565b600855565b611323611d98565b6113098383836122b0565b611336611d98565b6111a260006122f3565b611348611d98565b60125462010000900460ff16156113715760405162461bcd60e51b8152600401610bf29061385f565b6000828152601560209081526040909120825161130992840190612ea4565b611398611d98565b600d55565b6113a5611d98565b6111a2612345565b6113b5611d98565b600e55565b600560205281600052604060002081815481106113d657600080fd5b6000918252602090912001546001600160a01b0381169250600160a01b90046001600160601b0316905082565b60118054610cd8906136c2565b60078054610cd8906136c2565b60125460ff166114615760405162461bcd60e51b815260206004820152600f60248201526e73616c65206e6f742061637469766560881b6044820152606401610bf2565b600081116114a35760405162461bcd60e51b815260206004820152600f60248201526e6d696e74696e6720746f6f2066657760881b6044820152606401610bf2565b600a548111156114f55760405162461bcd60e51b815260206004820152601760248201527f657863656564656420706572206d696e74206c696d69740000000000000000006044820152606401610bf2565b348160095461150491906137ac565b11156115495760405162461bcd60e51b81526020600482015260146024820152731a5b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606401610bf2565b60006009548261155991906137ac565b6115639034613888565b9050801561159a57604051339082156108fc029083906000818181858888f19350505050158015611598573d6000803e3d6000fd5b505b6000806115a933600b54610b8b565b905060006115b933600c54610b8b565b905060006115d5600c5460009081526004602052604090205490565b600c54600090815260136020526040902054909150811080156116085750600c5460009081526014602052604090205482105b1561168b576008546040805160208101929092526bffffffffffffffffffffffff193360601b169082015260548101849052607481018390526000906064906094016040516020818303038152906040528051906020012060001c61166d919061389f565b905086600e5461167d91906137ac565b81101561168957600194505b505b83156116bc5761169c600187613888565b95506116bc33600c54600160405180602001604052806000815250612388565b85156117d757600b546000908152601360209081526040808320546004909252909120546116eb9088906138b3565b11156117445760405162461bcd60e51b815260206004820152602260248201527f7374616e6461726420746f6b656e20737570706c792063617020657863656564604482015261195960f21b6064820152608401610bf2565b600b5460009081526014602052604090205461176087856138b3565b11156117ba5760405162461bcd60e51b8152602060048201526024808201527f7374616e6461726420746f6b656e20706572736f6e616c2063617020657863656044820152631959195960e21b6064820152608401610bf2565b6117d733600b548860405180602001604052806000815250612388565b7fc21f2d8cc46e7ab1c5fa22cd2ed0ab74c24f941f667d240b714b978bcc6bea64600b5487600c548761180b57600061180e565b60015b6040805194855260208501939093529183015260ff16606082015233608082015260a00160405180910390a1505050505050565b61184a611d98565b60125462010000900460ff16156118735760405162461bcd60e51b8152600401610bf29061385f565b8051611886906007906020840190612ea4565b507fafa35f42f46f5052816d7c6a2e9406eca98294b20726677862d83b4a7418d8d560076040516118b791906138cb565b60405180910390a150565b6118cd3383836124ab565b5050565b60156020526000908152604090208054610cd8906136c2565b606060056000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561196e57600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046001600160601b03168183015282526001909201910161191f565b505050509050919050565b60125462010000900460ff16156119a25760405162461bcd60e51b8152600401610bf29061385f565b6119aa611d98565b80516118cd906006906020840190612ea4565b6119c5611d98565b60125462010000900460ff16156119ee5760405162461bcd60e51b8152600401610bf29061385f565b6012805462ff0000191662010000179055565b6000600d5411611a4a5760405162461bcd60e51b8152602060048201526014602482015273195e18da185b99d9481b9bdd08195b98589b195960621b6044820152606401610bf2565b6000611a5833600b54610b8b565b9050600d54811015611aac5760405162461bcd60e51b815260206004820152601760248201527f746f6f20666577207374616e6461726420746f6b656e730000000000000000006044820152606401610bf2565b611abb33600b54600d5461258c565b610cae33600c54600160405180602001604052806000815250612388565b611ae1611d98565b6012805460ff19811660ff91821615908117909255168015611b0b5750601254610100900460ff16155b156111a2576012805461ff001916610100179055565b611b29611d98565b600a55565b60068054610cd8906136c2565b611b43611d98565b6001600160a01b038316611b8b5760405162461bcd60e51b815260206004820152600f60248201526e7a65726f20746f2d6164647265737360881b6044820152606401610bf2565b60008281526013602052604090205415611c0557600082815260136020908152604080832054600490925290912054611bc59083906138b3565b1115611c055760405162461bcd60e51b815260206004820152600f60248201526e1cdd5c1c1b1e48195e18d959591959608a1b6044820152606401610bf2565b611c2083838360405180602001604052806000815250612388565b60408051838152602081018390526001600160a01b0385168183015290517f1daf399549c8b1715feb1d8528ae393bfb7e7b2684f0732357e5a4473422db569181900360600190a1505050565b6001600160a01b038516331480611c895750611c898533610a63565b611ca55760405162461bcd60e51b8152600401610bf2906137f5565b61106285858585856126a4565b611cba611d98565b6001600160a01b038116611d1f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610bf2565b610cae816122f3565b611d30611d98565b600955565b611d3d611d98565b6113098383836127dc565b60006001600160e01b03198216636cdb3d1360e11b1480611d7957506001600160e01b031982166303a24d0760e21b145b80610c9757506301ffc9a760e01b6001600160e01b0319831614610c97565b6003546001600160a01b031633146111a25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610bf2565b80516118cd906002906020840190612ea4565b606081611e295750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e535780611e3d81613844565b9150611e4c9050600a836137e1565b9150611e2d565b6000816001600160401b03811115611e6d57611e6d612fb8565b6040519080825280601f01601f191660200182016040528015611e97576020820181803683370190505b509050815b8515611f2457611ead600182613888565b90506000611ebc600a886137e1565b611ec790600a6137ac565b611ed19088613888565b611edc906030613950565b905060008160f81b905080848481518110611ef957611ef9613780565b60200101906001600160f81b031916908160001a905350611f1b600a896137e1565b97505050611e9c565b50949350505050565b60005b81518110156120a65760006001600160a01b0316828281518110611f5657611f56613780565b6020026020010151600001516001600160a01b03161415611fb95760405162461bcd60e51b815260206004820152601b60248201527f526563697069656e742073686f756c642062652070726573656e7400000000006044820152606401610bf2565b818181518110611fcb57611fcb613780565b6020026020010151602001516001600160601b0316600014156120305760405162461bcd60e51b815260206004820181905260248201527f526f79616c74792076616c75652073686f756c6420626520706f7369746976656044820152606401610bf2565b6000838152600560205260409020825183908390811061205257612052613780565b6020908102919091018101518254600181018455600093845292829020815191909201516001600160601b0316600160a01b026001600160a01b03909116179101558061209e81613844565b915050611f30565b506118cd828261281f565b81518351146120d25760405162461bcd60e51b8152600401610bf290613975565b6001600160a01b0384166120f85760405162461bcd60e51b8152600401610bf2906139bd565b3361210781878787878761285c565b60005b84518110156121ed57600085828151811061212757612127613780565b60200260200101519050600085838151811061214557612145613780565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156121955760405162461bcd60e51b8152600401610bf290613a02565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906121d29084906138b3565b92505081905550505050806121e690613844565b905061210a565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161223d929190613a4c565b60405180910390a4612253818787878787612872565b505050505050565b6122636129dd565b6003805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0383163314806122cc57506122cc8333610a63565b6122e85760405162461bcd60e51b8152600401610bf2906137f5565b611309838383612a2d565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61234d612bc9565b6003805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586122933390565b6001600160a01b0384166123e85760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610bf2565b3360006123f485612c16565b9050600061240185612c16565b90506124128360008985858961285c565b6000868152602081815260408083206001600160a01b038b168452909152812080548792906124429084906138b3565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46124a283600089898989612c61565b50505050505050565b816001600160a01b0316836001600160a01b0316141561251f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610bf2565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383166125b25760405162461bcd60e51b8152600401610bf290613a7a565b3360006125be84612c16565b905060006125cb84612c16565b90506125eb8387600085856040518060200160405280600081525061285c565b6000858152602081815260408083206001600160a01b038a1684529091529020548481101561262c5760405162461bcd60e51b8152600401610bf290613abd565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090526124a2565b6001600160a01b0384166126ca5760405162461bcd60e51b8152600401610bf2906139bd565b3360006126d685612c16565b905060006126e385612c16565b90506126f383898985858961285c565b6000868152602081815260408083206001600160a01b038c168452909152902054858110156127345760405162461bcd60e51b8152600401610bf290613a02565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906127719084906138b3565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46127d1848a8a8a8a8a612c61565b505050505050505050565b6001600160a01b0383163314806127f857506127f88333610a63565b6128145760405162461bcd60e51b8152600401610bf2906137f5565b61130983838361258c565b7f3fa96d7b6bcbfe71ef171666d84db3cf52fa2d1c8afdb1cc8e486177f208b7df8282604051612850929190613b01565b60405180910390a15050565b612864612bc9565b612253868686868686612d2b565b6001600160a01b0384163b156122535760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906128b69089908990889088908890600401613b1a565b602060405180830381600087803b1580156128d057600080fd5b505af1925050508015612900575060408051601f3d908101601f191682019092526128fd91810190613b78565b60015b6129ad5761290c613b95565b806308c379a014156129465750612921613bb1565b8061292c5750612948565b8060405162461bcd60e51b8152600401610bf29190613123565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610bf2565b6001600160e01b0319811663bc197c8160e01b146124a25760405162461bcd60e51b8152600401610bf290613c3a565b600354600160a01b900460ff166111a25760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610bf2565b6001600160a01b038316612a535760405162461bcd60e51b8152600401610bf290613a7a565b8051825114612a745760405162461bcd60e51b8152600401610bf290613975565b6000339050612a978185600086866040518060200160405280600081525061285c565b60005b8351811015612b5c576000848281518110612ab757612ab7613780565b602002602001015190506000848381518110612ad557612ad5613780565b602090810291909101810151600084815280835260408082206001600160a01b038c168352909352919091205490915081811015612b255760405162461bcd60e51b8152600401610bf290613abd565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580612b5481613844565b915050612a9a565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612bad929190613a4c565b60405180910390a4604080516020810190915260009052610f04565b600354600160a01b900460ff16156111a25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610bf2565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612c5057612c50613780565b602090810291909101015292915050565b6001600160a01b0384163b156122535760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612ca59089908990889088908890600401613c82565b602060405180830381600087803b158015612cbf57600080fd5b505af1925050508015612cef575060408051601f3d908101601f19168201909252612cec91810190613b78565b60015b612cfb5761290c613b95565b6001600160e01b0319811663f23a6e6160e01b146124a25760405162461bcd60e51b8152600401610bf290613c3a565b6001600160a01b038516612db25760005b8351811015612db057828181518110612d5757612d57613780565b602002602001015160046000868481518110612d7557612d75613780565b602002602001015181526020019081526020016000206000828254612d9a91906138b3565b90915550612da9905081613844565b9050612d3c565b505b6001600160a01b0384166122535760005b83518110156124a2576000848281518110612de057612de0613780565b602002602001015190506000848381518110612dfe57612dfe613780565b6020026020010151905060006004600084815260200190815260200160002054905081811015612e815760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b6064820152608401610bf2565b60009283526004602052604090922091039055612e9d81613844565b9050612dc3565b828054612eb0906136c2565b90600052602060002090601f016020900481019282612ed25760008555612f18565b82601f10612eeb57805160ff1916838001178555612f18565b82800160010185558215612f18579182015b82811115612f18578251825591602001919060010190612efd565b50612f24929150612f28565b5090565b5b80821115612f245760008155600101612f29565b6001600160a01b0381168114610cae57600080fd5b60008060408385031215612f6557600080fd5b8235612f7081612f3d565b946020939093013593505050565b6001600160e01b031981168114610cae57600080fd5b600060208284031215612fa657600080fd5b8135612fb181612f7e565b9392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715612ff357612ff3612fb8565b6040525050565b600082601f83011261300b57600080fd5b81356001600160401b0381111561302457613024612fb8565b60405161303b601f8301601f191660200182612fce565b81815284602083860101111561305057600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561307f57600080fd5b81356001600160401b0381111561309557600080fd5b6130a184828501612ffa565b949350505050565b600080604083850312156130bc57600080fd5b50508035926020909101359150565b60005b838110156130e65781810151838201526020016130ce565b83811115610f045750506000910152565b6000815180845261310f8160208601602086016130cb565b601f01601f19169290920160200192915050565b602081526000612fb160208301846130f7565b60006020828403121561314857600080fd5b5035919050565b60008060006060848603121561316457600080fd5b83359250602084013561317681612f3d565b915060408401356001600160601b038116811461319257600080fd5b809150509250925092565b60006001600160401b038211156131b6576131b6612fb8565b5060051b60200190565b600082601f8301126131d157600080fd5b813560206131de8261319d565b6040516131eb8282612fce565b83815260059390931b850182019282810191508684111561320b57600080fd5b8286015b84811015613226578035835291830191830161320f565b509695505050505050565b600080600080600060a0868803121561324957600080fd5b853561325481612f3d565b9450602086013561326481612f3d565b935060408601356001600160401b038082111561328057600080fd5b61328c89838a016131c0565b945060608801359150808211156132a257600080fd5b6132ae89838a016131c0565b935060808801359150808211156132c457600080fd5b506132d188828901612ffa565b9150509295509295909350565b6000602082840312156132f057600080fd5b8135612fb181612f3d565b8035801515811461330b57600080fd5b919050565b6000806040838503121561332357600080fd5b82359150613333602084016132fb565b90509250929050565b6000806040838503121561334f57600080fd5b82356001600160401b038082111561336657600080fd5b818501915085601f83011261337a57600080fd5b813560206133878261319d565b6040516133948282612fce565b83815260059390931b85018201928281019150898411156133b457600080fd5b948201945b838610156133db5785356133cc81612f3d565b825294820194908201906133b9565b965050860135925050808211156133f157600080fd5b506133fe858286016131c0565b9150509250929050565b600081518084526020808501945080840160005b838110156134385781518752958201959082019060010161341c565b509495945050505050565b602081526000612fb16020830184613408565b6000806040838503121561346957600080fd5b82356001600160401b038082111561348057600080fd5b61348c86838701612ffa565b935060208501359150808211156134a257600080fd5b506133fe85828601612ffa565b6000806000606084860312156134c457600080fd5b83356134cf81612f3d565b925060208401356001600160401b03808211156134eb57600080fd5b6134f7878388016131c0565b9350604086013591508082111561350d57600080fd5b5061351a868287016131c0565b9150509250925092565b6000806040838503121561353757600080fd5b8235915060208301356001600160401b0381111561355457600080fd5b6133fe85828601612ffa565b6000806040838503121561357357600080fd5b823561357e81612f3d565b9150613333602084016132fb565b600081518084526020808501945080840160005b8381101561343857815180516001600160a01b031688528301516001600160601b031683880152604090960195908201906001016135a0565b602081526000612fb1602083018461358c565b600080604083850312156135ff57600080fd5b823561360a81612f3d565b9150602083013561361a81612f3d565b809150509250929050565b60008060006060848603121561363a57600080fd5b833561364581612f3d565b95602085013595506040909401359392505050565b600080600080600060a0868803121561367257600080fd5b853561367d81612f3d565b9450602086013561368d81612f3d565b9350604086013592506060860135915060808601356001600160401b038111156136b657600080fd5b6132d188828901612ffa565b600181811c908216806136d657607f821691505b602082108114156136f757634e487b7160e01b600052602260045260246000fd5b50919050565b600080845461370b816136c2565b60018281168015613723576001811461373457613763565b60ff19841687528287019450613763565b8860005260208060002060005b8581101561375a5781548a820152908401908201613741565b50505082870194505b5050505083516137778183602088016130cb565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156137c6576137c6613796565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826137f0576137f06137cb565b500490565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b600060001982141561385857613858613796565b5060010190565b6020808252600f908201526e36b2ba30b230ba3090333937bd32b760891b604082015260600190565b60008282101561389a5761389a613796565b500390565b6000826138ae576138ae6137cb565b500690565b600082198211156138c6576138c6613796565b500190565b60006020808352600084546138df816136c2565b80848701526040600180841660008114613900576001811461391457613942565b60ff19851689840152606089019550613942565b896000528660002060005b8581101561393a5781548b820186015290830190880161391f565b8a0184019650505b509398975050505050505050565b600060ff821660ff84168060ff0382111561396d5761396d613796565b019392505050565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b604081526000613a5f6040830185613408565b8281036020840152613a718185613408565b95945050505050565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b8281526040602082015260006130a1604083018461358c565b6001600160a01b0386811682528516602082015260a060408201819052600090613b4690830186613408565b8281036060840152613b588186613408565b90508281036080840152613b6c81856130f7565b98975050505050505050565b600060208284031215613b8a57600080fd5b8151612fb181612f7e565b600060033d1115613bae5760046000803e5060005160e01c5b90565b600060443d1015613bbf5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715613bee57505050505090565b8285019150815181811115613c065750505050505090565b843d8701016020828501011115613c205750505050505090565b613c2f60208286010187612fce565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613cbc908301846130f7565b97965050505050505056fea26469706673582212209f1a3d6ed1fdfa130a8ceed56d75851b914cf9de9be1dc3b024ca6c426d7a63764736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106103a55760003560e01c8063857aa89a116101e7578063cb5dcaec1161010d578063eb8d2444116100a0578063f4a0a5281161006f578063f4a0a52814610b0b578063f5298aca14610b2b578063f5dc7d5614610b4b578063fb3cc6c214610b6b57600080fd5b8063eb8d244414610a91578063edb2625514610aab578063f242432a14610acb578063f2fde38b14610aeb57600080fd5b8063daaeec86116100dc578063daaeec86146109fe578063db6242c314610a13578063e8a3d48514610a33578063e985e9c514610a4857600080fd5b8063cb5dcaec1461099e578063ccb4807b146109b4578063d111515d146109d4578063d2f7265a146109e957600080fd5b8063a0712d6811610185578063b4d7dbed11610154578063b4d7dbed14610918578063bd85b0391461092e578063bfa0b1331461095b578063cad96cca1461097157600080fd5b8063a0712d68146108a5578063a0bcfc7f146108b8578063a22cb465146108d8578063a65b9926146108f857600080fd5b80638924af74116101c15780638924af74146108025780638da5cb5b1461084957806395d89b411461087b5780639abc83201461089057600080fd5b8063857aa89a1461079f578063857c2985146107bf578063869f7594146107d557600080fd5b80634006ccc5116102cc5780635c975abb1161026a578063715018a611610239578063715018a614610735578063782f08ae1461074a5780637c7810801461076a5780638456cb591461078a57600080fd5b80635c975abb146106c0578063611ef44f146106df5780636817c76c146106ff5780636b20c4541461071557600080fd5b80634f558e79116102a65780634f558e791461063c578063504334c21461066b578063507e094f1461068b5780635c474f9e146106a157600080fd5b80634006ccc5146105d95780634798b851146105ef5780634e1273f41461060f57600080fd5b80632591003311610344578063311aaef511610313578063311aaef51461055757806337da577c1461058457806338d07436146105a45780633f4ba83a146105c457600080fd5b806325910033146104b85780632a55205a146104d85780632eb2c2d61461051757806330027f3b1461053757600080fd5b8063064c6b3811610380578063064c6b381461043657806306fdde03146104565780630e89341c14610478578063143094db1461049857600080fd5b8062fdd58e146103b157806301ffc9a7146103e457806302fe53051461041457600080fd5b366103ac57005b600080fd5b3480156103bd57600080fd5b506103d16103cc366004612f52565b610b8b565b6040519081526020015b60405180910390f35b3480156103f057600080fd5b506104046103ff366004612f94565b610c21565b60405190151581526020016103db565b34801561042057600080fd5b5061043461042f36600461306d565b610c9d565b005b34801561044257600080fd5b506104346104513660046130a9565b610cb1565b34801561046257600080fd5b5061046b610ccb565b6040516103db9190613123565b34801561048457600080fd5b5061046b610493366004613136565b610d59565b3480156104a457600080fd5b506104346104b336600461314f565b610e4e565b3480156104c457600080fd5b506104346104d3366004613136565b610f0a565b3480156104e457600080fd5b506104f86104f33660046130a9565b610f17565b604080516001600160a01b0390931683526020830191909152016103db565b34801561052357600080fd5b50610434610532366004613231565b61101d565b34801561054357600080fd5b506104346105523660046132de565b611069565b34801561056357600080fd5b506103d1610572366004613136565b60146020526000908152604090205481565b34801561059057600080fd5b5061043461059f3660046130a9565b611093565b3480156105b057600080fd5b506104346105bf366004613310565b6110ad565b3480156105d057600080fd5b50610434611192565b3480156105e557600080fd5b506103d1600d5481565b3480156105fb57600080fd5b5061043461060a366004613136565b6111a4565b34801561061b57600080fd5b5061062f61062a36600461333c565b6111b1565b6040516103db9190613443565b34801561064857600080fd5b50610404610657366004613136565b600090815260046020526040902054151590565b34801561067757600080fd5b50610434610686366004613456565b6112da565b34801561069757600080fd5b506103d1600a5481565b3480156106ad57600080fd5b5060125461040490610100900460ff1681565b3480156106cc57600080fd5b50600354600160a01b900460ff16610404565b3480156106eb57600080fd5b506104346106fa366004613136565b61130e565b34801561070b57600080fd5b506103d160095481565b34801561072157600080fd5b506104346107303660046134af565b61131b565b34801561074157600080fd5b5061043461132e565b34801561075657600080fd5b50610434610765366004613524565b611340565b34801561077657600080fd5b50610434610785366004613136565b611390565b34801561079657600080fd5b5061043461139d565b3480156107ab57600080fd5b506104346107ba366004613136565b6113ad565b3480156107cb57600080fd5b506103d1600b5481565b3480156107e157600080fd5b506103d16107f0366004613136565b60136020526000908152604090205481565b34801561080e57600080fd5b5061082261081d3660046130a9565b6113ba565b604080516001600160a01b0390931683526001600160601b039091166020830152016103db565b34801561085557600080fd5b506003546001600160a01b03165b6040516001600160a01b0390911681526020016103db565b34801561088757600080fd5b5061046b611403565b34801561089c57600080fd5b5061046b611410565b6104346108b3366004613136565b61141d565b3480156108c457600080fd5b506104346108d336600461306d565b611842565b3480156108e457600080fd5b506104346108f3366004613560565b6118c2565b34801561090457600080fd5b5061046b610913366004613136565b6118d1565b34801561092457600080fd5b506103d1600c5481565b34801561093a57600080fd5b506103d1610949366004613136565b60009081526004602052604090205490565b34801561096757600080fd5b506103d160085481565b34801561097d57600080fd5b5061099161098c366004613136565b6118ea565b6040516103db91906135d9565b3480156109aa57600080fd5b506103d1600e5481565b3480156109c057600080fd5b506104346109cf36600461306d565b611979565b3480156109e057600080fd5b506104346119bd565b3480156109f557600080fd5b50610434611a01565b348015610a0a57600080fd5b50610434611ad9565b348015610a1f57600080fd5b50610434610a2e366004613136565b611b21565b348015610a3f57600080fd5b5061046b611b2e565b348015610a5457600080fd5b50610404610a633660046135ec565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b348015610a9d57600080fd5b506012546104049060ff1681565b348015610ab757600080fd5b50610434610ac6366004613625565b611b3b565b348015610ad757600080fd5b50610434610ae636600461365a565b611c6d565b348015610af757600080fd5b50610434610b063660046132de565b611cb2565b348015610b1757600080fd5b50610434610b26366004613136565b611d28565b348015610b3757600080fd5b50610434610b46366004613625565b611d35565b348015610b5757600080fd5b50600f54610863906001600160a01b031681565b348015610b7757600080fd5b506012546104049062010000900460ff1681565b60006001600160a01b038316610bfb5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b031982166306fdde0360e01b1480610c5257506001600160e01b031982166395d89b4160e01b145b80610c6d57506001600160e01b03198216631131d2f360e21b145b80610c8857506001600160e01b0319821663152a902d60e11b145b80610c975750610c9782611d48565b92915050565b610ca5611d98565b610cae81611df2565b50565b610cb9611d98565b60009182526014602052604090912055565b60108054610cd8906136c2565b80601f0160208091040260200160405190810160405280929190818152602001828054610d04906136c2565b8015610d515780601f10610d2657610100808354040283529160200191610d51565b820191906000526020600020905b815481529060010190602001808311610d3457829003601f168201915b505050505081565b6000818152601560205260409020805460609190610d76906136c2565b15159050610db0576007610d8983611e05565b604051602001610d9a9291906136fd565b6040516020818303038152906040529050919050565b60008281526015602052604090208054610dc9906136c2565b80601f0160208091040260200160405190810160405280929190818152602001828054610df5906136c2565b8015610e425780601f10610e1757610100808354040283529160200191610e42565b820191906000526020600020905b815481529060010190602001808311610e2557829003601f168201915b50505050509050919050565b610e56611d98565b604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610e6d5790505090508181600081518110610eaa57610eaa613780565b6020026020010151602001906001600160601b031690816001600160601b0316815250508281600081518110610ee257610ee2613780565b60209081029190910101516001600160a01b039091169052610f048482611f2d565b50505050565b610f12611d98565b600c55565b6000828152600560209081526040808320805482518185028101850190935280835284938493929190849084015b82821015610f9457600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046001600160601b031681830152825260019092019101610f45565b50505050905060008151111561100d5780600081518110610fb757610fb7613780565b60200260200101516000015161271082600081518110610fd957610fd9613780565b6020026020010151602001516001600160601b031686610ff991906137ac565b61100391906137e1565b9250925050611016565b60008092509250505b9250929050565b6001600160a01b03851633148061103957506110398533610a63565b6110555760405162461bcd60e51b8152600401610bf2906137f5565b61106285858585856120b1565b5050505050565b611071611d98565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b61109b611d98565b60009182526013602052604090912055565b6003546001600160a01b03163314806110d05750600f546001600160a01b031633145b61110b5760405162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b6044820152606401610bf2565b600081611123576003546001600160a01b0316611130565b600f546001600160a01b03165b90506000816001600160a01b03168460405160006040518083038185875af1925050503d806000811461117f576040519150601f19603f3d011682016040523d82523d6000602084013e611184565b606091505b5050905080610f0457600080fd5b61119a611d98565b6111a261225b565b565b6111ac611d98565b600b55565b606081518351146112165760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610bf2565b600083516001600160401b0381111561123157611231612fb8565b60405190808252806020026020018201604052801561125a578160200160208202803683370190505b50905060005b84518110156112d2576112a585828151811061127e5761127e613780565b602002602001015185838151811061129857611298613780565b6020026020010151610b8b565b8282815181106112b7576112b7613780565b60209081029190910101526112cb81613844565b9050611260565b509392505050565b6112e2611d98565b81516112f5906010906020850190612ea4565b508051611309906011906020840190612ea4565b505050565b611316611d98565b600855565b611323611d98565b6113098383836122b0565b611336611d98565b6111a260006122f3565b611348611d98565b60125462010000900460ff16156113715760405162461bcd60e51b8152600401610bf29061385f565b6000828152601560209081526040909120825161130992840190612ea4565b611398611d98565b600d55565b6113a5611d98565b6111a2612345565b6113b5611d98565b600e55565b600560205281600052604060002081815481106113d657600080fd5b6000918252602090912001546001600160a01b0381169250600160a01b90046001600160601b0316905082565b60118054610cd8906136c2565b60078054610cd8906136c2565b60125460ff166114615760405162461bcd60e51b815260206004820152600f60248201526e73616c65206e6f742061637469766560881b6044820152606401610bf2565b600081116114a35760405162461bcd60e51b815260206004820152600f60248201526e6d696e74696e6720746f6f2066657760881b6044820152606401610bf2565b600a548111156114f55760405162461bcd60e51b815260206004820152601760248201527f657863656564656420706572206d696e74206c696d69740000000000000000006044820152606401610bf2565b348160095461150491906137ac565b11156115495760405162461bcd60e51b81526020600482015260146024820152731a5b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606401610bf2565b60006009548261155991906137ac565b6115639034613888565b9050801561159a57604051339082156108fc029083906000818181858888f19350505050158015611598573d6000803e3d6000fd5b505b6000806115a933600b54610b8b565b905060006115b933600c54610b8b565b905060006115d5600c5460009081526004602052604090205490565b600c54600090815260136020526040902054909150811080156116085750600c5460009081526014602052604090205482105b1561168b576008546040805160208101929092526bffffffffffffffffffffffff193360601b169082015260548101849052607481018390526000906064906094016040516020818303038152906040528051906020012060001c61166d919061389f565b905086600e5461167d91906137ac565b81101561168957600194505b505b83156116bc5761169c600187613888565b95506116bc33600c54600160405180602001604052806000815250612388565b85156117d757600b546000908152601360209081526040808320546004909252909120546116eb9088906138b3565b11156117445760405162461bcd60e51b815260206004820152602260248201527f7374616e6461726420746f6b656e20737570706c792063617020657863656564604482015261195960f21b6064820152608401610bf2565b600b5460009081526014602052604090205461176087856138b3565b11156117ba5760405162461bcd60e51b8152602060048201526024808201527f7374616e6461726420746f6b656e20706572736f6e616c2063617020657863656044820152631959195960e21b6064820152608401610bf2565b6117d733600b548860405180602001604052806000815250612388565b7fc21f2d8cc46e7ab1c5fa22cd2ed0ab74c24f941f667d240b714b978bcc6bea64600b5487600c548761180b57600061180e565b60015b6040805194855260208501939093529183015260ff16606082015233608082015260a00160405180910390a1505050505050565b61184a611d98565b60125462010000900460ff16156118735760405162461bcd60e51b8152600401610bf29061385f565b8051611886906007906020840190612ea4565b507fafa35f42f46f5052816d7c6a2e9406eca98294b20726677862d83b4a7418d8d560076040516118b791906138cb565b60405180910390a150565b6118cd3383836124ab565b5050565b60156020526000908152604090208054610cd8906136c2565b606060056000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561196e57600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046001600160601b03168183015282526001909201910161191f565b505050509050919050565b60125462010000900460ff16156119a25760405162461bcd60e51b8152600401610bf29061385f565b6119aa611d98565b80516118cd906006906020840190612ea4565b6119c5611d98565b60125462010000900460ff16156119ee5760405162461bcd60e51b8152600401610bf29061385f565b6012805462ff0000191662010000179055565b6000600d5411611a4a5760405162461bcd60e51b8152602060048201526014602482015273195e18da185b99d9481b9bdd08195b98589b195960621b6044820152606401610bf2565b6000611a5833600b54610b8b565b9050600d54811015611aac5760405162461bcd60e51b815260206004820152601760248201527f746f6f20666577207374616e6461726420746f6b656e730000000000000000006044820152606401610bf2565b611abb33600b54600d5461258c565b610cae33600c54600160405180602001604052806000815250612388565b611ae1611d98565b6012805460ff19811660ff91821615908117909255168015611b0b5750601254610100900460ff16155b156111a2576012805461ff001916610100179055565b611b29611d98565b600a55565b60068054610cd8906136c2565b611b43611d98565b6001600160a01b038316611b8b5760405162461bcd60e51b815260206004820152600f60248201526e7a65726f20746f2d6164647265737360881b6044820152606401610bf2565b60008281526013602052604090205415611c0557600082815260136020908152604080832054600490925290912054611bc59083906138b3565b1115611c055760405162461bcd60e51b815260206004820152600f60248201526e1cdd5c1c1b1e48195e18d959591959608a1b6044820152606401610bf2565b611c2083838360405180602001604052806000815250612388565b60408051838152602081018390526001600160a01b0385168183015290517f1daf399549c8b1715feb1d8528ae393bfb7e7b2684f0732357e5a4473422db569181900360600190a1505050565b6001600160a01b038516331480611c895750611c898533610a63565b611ca55760405162461bcd60e51b8152600401610bf2906137f5565b61106285858585856126a4565b611cba611d98565b6001600160a01b038116611d1f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610bf2565b610cae816122f3565b611d30611d98565b600955565b611d3d611d98565b6113098383836127dc565b60006001600160e01b03198216636cdb3d1360e11b1480611d7957506001600160e01b031982166303a24d0760e21b145b80610c9757506301ffc9a760e01b6001600160e01b0319831614610c97565b6003546001600160a01b031633146111a25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610bf2565b80516118cd906002906020840190612ea4565b606081611e295750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e535780611e3d81613844565b9150611e4c9050600a836137e1565b9150611e2d565b6000816001600160401b03811115611e6d57611e6d612fb8565b6040519080825280601f01601f191660200182016040528015611e97576020820181803683370190505b509050815b8515611f2457611ead600182613888565b90506000611ebc600a886137e1565b611ec790600a6137ac565b611ed19088613888565b611edc906030613950565b905060008160f81b905080848481518110611ef957611ef9613780565b60200101906001600160f81b031916908160001a905350611f1b600a896137e1565b97505050611e9c565b50949350505050565b60005b81518110156120a65760006001600160a01b0316828281518110611f5657611f56613780565b6020026020010151600001516001600160a01b03161415611fb95760405162461bcd60e51b815260206004820152601b60248201527f526563697069656e742073686f756c642062652070726573656e7400000000006044820152606401610bf2565b818181518110611fcb57611fcb613780565b6020026020010151602001516001600160601b0316600014156120305760405162461bcd60e51b815260206004820181905260248201527f526f79616c74792076616c75652073686f756c6420626520706f7369746976656044820152606401610bf2565b6000838152600560205260409020825183908390811061205257612052613780565b6020908102919091018101518254600181018455600093845292829020815191909201516001600160601b0316600160a01b026001600160a01b03909116179101558061209e81613844565b915050611f30565b506118cd828261281f565b81518351146120d25760405162461bcd60e51b8152600401610bf290613975565b6001600160a01b0384166120f85760405162461bcd60e51b8152600401610bf2906139bd565b3361210781878787878761285c565b60005b84518110156121ed57600085828151811061212757612127613780565b60200260200101519050600085838151811061214557612145613780565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156121955760405162461bcd60e51b8152600401610bf290613a02565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906121d29084906138b3565b92505081905550505050806121e690613844565b905061210a565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161223d929190613a4c565b60405180910390a4612253818787878787612872565b505050505050565b6122636129dd565b6003805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0383163314806122cc57506122cc8333610a63565b6122e85760405162461bcd60e51b8152600401610bf2906137f5565b611309838383612a2d565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61234d612bc9565b6003805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586122933390565b6001600160a01b0384166123e85760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610bf2565b3360006123f485612c16565b9050600061240185612c16565b90506124128360008985858961285c565b6000868152602081815260408083206001600160a01b038b168452909152812080548792906124429084906138b3565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46124a283600089898989612c61565b50505050505050565b816001600160a01b0316836001600160a01b0316141561251f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610bf2565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383166125b25760405162461bcd60e51b8152600401610bf290613a7a565b3360006125be84612c16565b905060006125cb84612c16565b90506125eb8387600085856040518060200160405280600081525061285c565b6000858152602081815260408083206001600160a01b038a1684529091529020548481101561262c5760405162461bcd60e51b8152600401610bf290613abd565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090526124a2565b6001600160a01b0384166126ca5760405162461bcd60e51b8152600401610bf2906139bd565b3360006126d685612c16565b905060006126e385612c16565b90506126f383898985858961285c565b6000868152602081815260408083206001600160a01b038c168452909152902054858110156127345760405162461bcd60e51b8152600401610bf290613a02565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906127719084906138b3565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46127d1848a8a8a8a8a612c61565b505050505050505050565b6001600160a01b0383163314806127f857506127f88333610a63565b6128145760405162461bcd60e51b8152600401610bf2906137f5565b61130983838361258c565b7f3fa96d7b6bcbfe71ef171666d84db3cf52fa2d1c8afdb1cc8e486177f208b7df8282604051612850929190613b01565b60405180910390a15050565b612864612bc9565b612253868686868686612d2b565b6001600160a01b0384163b156122535760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906128b69089908990889088908890600401613b1a565b602060405180830381600087803b1580156128d057600080fd5b505af1925050508015612900575060408051601f3d908101601f191682019092526128fd91810190613b78565b60015b6129ad5761290c613b95565b806308c379a014156129465750612921613bb1565b8061292c5750612948565b8060405162461bcd60e51b8152600401610bf29190613123565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610bf2565b6001600160e01b0319811663bc197c8160e01b146124a25760405162461bcd60e51b8152600401610bf290613c3a565b600354600160a01b900460ff166111a25760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610bf2565b6001600160a01b038316612a535760405162461bcd60e51b8152600401610bf290613a7a565b8051825114612a745760405162461bcd60e51b8152600401610bf290613975565b6000339050612a978185600086866040518060200160405280600081525061285c565b60005b8351811015612b5c576000848281518110612ab757612ab7613780565b602002602001015190506000848381518110612ad557612ad5613780565b602090810291909101810151600084815280835260408082206001600160a01b038c168352909352919091205490915081811015612b255760405162461bcd60e51b8152600401610bf290613abd565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580612b5481613844565b915050612a9a565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612bad929190613a4c565b60405180910390a4604080516020810190915260009052610f04565b600354600160a01b900460ff16156111a25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610bf2565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612c5057612c50613780565b602090810291909101015292915050565b6001600160a01b0384163b156122535760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612ca59089908990889088908890600401613c82565b602060405180830381600087803b158015612cbf57600080fd5b505af1925050508015612cef575060408051601f3d908101601f19168201909252612cec91810190613b78565b60015b612cfb5761290c613b95565b6001600160e01b0319811663f23a6e6160e01b146124a25760405162461bcd60e51b8152600401610bf290613c3a565b6001600160a01b038516612db25760005b8351811015612db057828181518110612d5757612d57613780565b602002602001015160046000868481518110612d7557612d75613780565b602002602001015181526020019081526020016000206000828254612d9a91906138b3565b90915550612da9905081613844565b9050612d3c565b505b6001600160a01b0384166122535760005b83518110156124a2576000848281518110612de057612de0613780565b602002602001015190506000848381518110612dfe57612dfe613780565b6020026020010151905060006004600084815260200190815260200160002054905081811015612e815760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b6064820152608401610bf2565b60009283526004602052604090922091039055612e9d81613844565b9050612dc3565b828054612eb0906136c2565b90600052602060002090601f016020900481019282612ed25760008555612f18565b82601f10612eeb57805160ff1916838001178555612f18565b82800160010185558215612f18579182015b82811115612f18578251825591602001919060010190612efd565b50612f24929150612f28565b5090565b5b80821115612f245760008155600101612f29565b6001600160a01b0381168114610cae57600080fd5b60008060408385031215612f6557600080fd5b8235612f7081612f3d565b946020939093013593505050565b6001600160e01b031981168114610cae57600080fd5b600060208284031215612fa657600080fd5b8135612fb181612f7e565b9392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715612ff357612ff3612fb8565b6040525050565b600082601f83011261300b57600080fd5b81356001600160401b0381111561302457613024612fb8565b60405161303b601f8301601f191660200182612fce565b81815284602083860101111561305057600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561307f57600080fd5b81356001600160401b0381111561309557600080fd5b6130a184828501612ffa565b949350505050565b600080604083850312156130bc57600080fd5b50508035926020909101359150565b60005b838110156130e65781810151838201526020016130ce565b83811115610f045750506000910152565b6000815180845261310f8160208601602086016130cb565b601f01601f19169290920160200192915050565b602081526000612fb160208301846130f7565b60006020828403121561314857600080fd5b5035919050565b60008060006060848603121561316457600080fd5b83359250602084013561317681612f3d565b915060408401356001600160601b038116811461319257600080fd5b809150509250925092565b60006001600160401b038211156131b6576131b6612fb8565b5060051b60200190565b600082601f8301126131d157600080fd5b813560206131de8261319d565b6040516131eb8282612fce565b83815260059390931b850182019282810191508684111561320b57600080fd5b8286015b84811015613226578035835291830191830161320f565b509695505050505050565b600080600080600060a0868803121561324957600080fd5b853561325481612f3d565b9450602086013561326481612f3d565b935060408601356001600160401b038082111561328057600080fd5b61328c89838a016131c0565b945060608801359150808211156132a257600080fd5b6132ae89838a016131c0565b935060808801359150808211156132c457600080fd5b506132d188828901612ffa565b9150509295509295909350565b6000602082840312156132f057600080fd5b8135612fb181612f3d565b8035801515811461330b57600080fd5b919050565b6000806040838503121561332357600080fd5b82359150613333602084016132fb565b90509250929050565b6000806040838503121561334f57600080fd5b82356001600160401b038082111561336657600080fd5b818501915085601f83011261337a57600080fd5b813560206133878261319d565b6040516133948282612fce565b83815260059390931b85018201928281019150898411156133b457600080fd5b948201945b838610156133db5785356133cc81612f3d565b825294820194908201906133b9565b965050860135925050808211156133f157600080fd5b506133fe858286016131c0565b9150509250929050565b600081518084526020808501945080840160005b838110156134385781518752958201959082019060010161341c565b509495945050505050565b602081526000612fb16020830184613408565b6000806040838503121561346957600080fd5b82356001600160401b038082111561348057600080fd5b61348c86838701612ffa565b935060208501359150808211156134a257600080fd5b506133fe85828601612ffa565b6000806000606084860312156134c457600080fd5b83356134cf81612f3d565b925060208401356001600160401b03808211156134eb57600080fd5b6134f7878388016131c0565b9350604086013591508082111561350d57600080fd5b5061351a868287016131c0565b9150509250925092565b6000806040838503121561353757600080fd5b8235915060208301356001600160401b0381111561355457600080fd5b6133fe85828601612ffa565b6000806040838503121561357357600080fd5b823561357e81612f3d565b9150613333602084016132fb565b600081518084526020808501945080840160005b8381101561343857815180516001600160a01b031688528301516001600160601b031683880152604090960195908201906001016135a0565b602081526000612fb1602083018461358c565b600080604083850312156135ff57600080fd5b823561360a81612f3d565b9150602083013561361a81612f3d565b809150509250929050565b60008060006060848603121561363a57600080fd5b833561364581612f3d565b95602085013595506040909401359392505050565b600080600080600060a0868803121561367257600080fd5b853561367d81612f3d565b9450602086013561368d81612f3d565b9350604086013592506060860135915060808601356001600160401b038111156136b657600080fd5b6132d188828901612ffa565b600181811c908216806136d657607f821691505b602082108114156136f757634e487b7160e01b600052602260045260246000fd5b50919050565b600080845461370b816136c2565b60018281168015613723576001811461373457613763565b60ff19841687528287019450613763565b8860005260208060002060005b8581101561375a5781548a820152908401908201613741565b50505082870194505b5050505083516137778183602088016130cb565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156137c6576137c6613796565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826137f0576137f06137cb565b500490565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b600060001982141561385857613858613796565b5060010190565b6020808252600f908201526e36b2ba30b230ba3090333937bd32b760891b604082015260600190565b60008282101561389a5761389a613796565b500390565b6000826138ae576138ae6137cb565b500690565b600082198211156138c6576138c6613796565b500190565b60006020808352600084546138df816136c2565b80848701526040600180841660008114613900576001811461391457613942565b60ff19851689840152606089019550613942565b896000528660002060005b8581101561393a5781548b820186015290830190880161391f565b8a0184019650505b509398975050505050505050565b600060ff821660ff84168060ff0382111561396d5761396d613796565b019392505050565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b604081526000613a5f6040830185613408565b8281036020840152613a718185613408565b95945050505050565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b8281526040602082015260006130a1604083018461358c565b6001600160a01b0386811682528516602082015260a060408201819052600090613b4690830186613408565b8281036060840152613b588186613408565b90508281036080840152613b6c81856130f7565b98975050505050505050565b600060208284031215613b8a57600080fd5b8151612fb181612f7e565b600060033d1115613bae5760046000803e5060005160e01c5b90565b600060443d1015613bbf5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715613bee57505050505090565b8285019150815181811115613c065750505050505090565b843d8701016020828501011115613c205750505050505090565b613c2f60208286010187612fce565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613cbc908301846130f7565b97965050505050505056fea26469706673582212209f1a3d6ed1fdfa130a8ceed56d75851b914cf9de9be1dc3b024ca6c426d7a63764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Developed by: John Whitton (github: johnwhittton), Aaron Li (github: polymorpher)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8630,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8636,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8638,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 8391,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8514,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "_paused",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 10069,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16689,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "royalties",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_array(t_struct(Part)16632_storage)dyn_storage)"
      },
      {
        "astId": 14413,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "contractURI",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 14415,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "baseUri",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 14417,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "salt",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 14419,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "mintPrice",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 14421,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "maxPerMint",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 14423,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "standardTokenId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 14425,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "rareTokenId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 14427,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "exchangeRatio",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 14429,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "rareProbabilityPercentage",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 14431,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "revenueAccount",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 14433,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "name",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 14435,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "symbol",
        "offset": 0,
        "slot": "17",
        "type": "t_string_storage"
      },
      {
        "astId": 14437,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "saleIsActive",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 14439,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "saleStarted",
        "offset": 1,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 14441,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "metadataFrozen",
        "offset": 2,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 14445,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "maxSupply",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 14449,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "maxPersonalCap",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 14453,
        "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
        "label": "metadataUris",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Part)16632_storage)dyn_storage": {
        "base": "t_struct(Part)16632_storage",
        "encoding": "dynamic_array",
        "label": "struct LibPart.Part[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_struct(Part)16632_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibPart.Part[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Part)16632_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Part)16632_storage": {
        "encoding": "inplace",
        "label": "struct LibPart.Part",
        "members": [
          {
            "astId": 16629,
            "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 16631,
            "contract": "contracts/miniNFTs/Mini1155.sol:Mini1155",
            "label": "value",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}